
@{
    ViewData["Title"] = $"{ViewBag.Name} Block Explorer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using System.Globalization
@using Solaris.BlockExplorer.UI.Extensions
@using Solaris.BlockExplorer.UI.HtmlHelpers
@model Solaris.BlockExplorer.UI.Models.ViewModels.ITransactionViewModel

<div class="row mt-2 mb-2 collapse clipboard-success">
    <div class="col-12">
        <div class="alert alert-success" role="alert">
            <span class="align-middle">
                <i class="fas fa-check-circle fa-2x mr-2"></i>
            </span>
            <span class="align-middle">
                The transaction hash has been copied to the clipboard
            </span>
        </div>
    </div>
</div>
<div class="row mt-2 mb-2">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Details for Transaction
                </h4>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Hash</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">
                        <a href="@Url.Action("Index", new {transactionHash = Model.Transaction.Id})">@Model.Transaction.Id</a>
                        <i class="ml-2 fas fa-copy cursor-pointer clipboard" title="Copy to clipboard" data-clipboard-text="@Model.Transaction.Id"></i>
                    </div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Size</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@(Math.Round(Model.Transaction.Size / 1024m, 4)) kB</div>
                </div>
                @if (Model.Transaction.LockTime > 0)
                {
                    <div class="row rows">
                        <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Lock Time</div>
                        <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transaction.LockTime</div>
                    </div>
                }
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Block Height</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transaction.BlockHeight (@Model.Transaction.Confirmations Confirmations)</div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Block Time</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@DateTimeOffset.FromUnixTimeSeconds(Model.Transaction.BlockTime).DateTime.ToString(CultureInfo.CurrentUICulture)</div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Total Outputs</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transaction.TotalOutputs @ViewBag.Ticker</div>
                </div>
                @if (!Model.Transaction.IsReward)
                {
                    <div class="row rows">
                        <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Total Inputs</div>
                        <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transaction.TotalInputs @ViewBag.Ticker</div>
                    </div>
                    <div class="row rows">
                        <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Fee</div>
                        <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transaction.Fee @ViewBag.Ticker</div>
                    </div>
                    <div class="row rows">
                        <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Fee per byte</div>
                        <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@(Math.Round(Model.Transaction.FeePerByte, 8)) sat/B</div>
                    </div>
                }
                else
                {
                    <div class="row rows">
                        <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Reward for block</div>
                        <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">
                            <a href="@Url.Action("Index", "Block", new {blockHash = Model.Transaction.BlockId})">@Model.Transaction.BlockHeight</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-2 mb-2">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Inputs
                </h4>
                <div class="row row-header">
                    <div class="col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 col-xxxl-1 row-header-column text-left">Index</div>
                    <div class="col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 col-xxxl-6 row-header-column text-left">Previous output</div>
                    <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 col-xxxl-3 row-header-column text-left">Address</div>
                    <div class="col-sm-2 col-md-2 col-lg-2 col-xl-2 col-xxl-2 col-xxxl-2 row-header-column text-right">Amount</div>

                </div>
                <div class="row">
                    <div class="col-12">
                        @{ var i = 0L;}
                        @foreach (var input in Model.Inputs)
                        {

                            <div class="row rows">
                                <div class="col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 col-xxxl-1 row-column text-left">
                                    @i
                                </div>
                                <div class="col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 col-xxxl-6 row-column text-left">
                                    @if (string.IsNullOrEmpty(input.PreviousOutputTransactionId))
                                    {
                                        <span>Generation + Fees</span>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Index", "Transaction", new {transactionHash = input.PreviousOutputTransactionId})">
                                            <span class="text-truncate">@input.PreviousOutputTransactionId</span>:<span>@input.PreviousOutputIndex</span>
                                        </a>
                                    }
                                </div>
                                <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 col-xxxl-3 row-column text-left">
                                    @Url.AddressLink(input.Addresses)
                                    @if (!input.Addresses.Any())
                                    {
                                        <span>N/A</span>
                                    }
                                </div>
                                <div class="col-sm-2 col-md-2 col-lg-2 col-xl-2 col-xxl-2 col-xxxl-2 row-column text-right">
                                    @if (string.IsNullOrEmpty(input.PreviousOutputTransactionId))
                                    {
                                        @Model.Transaction.TotalOutputs
                                        @ViewBag.Ticker
                                    }
                                    else
                                    {
                                        @input.Amount
                                    }
                                </div>

                            </div>
                            i++;
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-2 mb-2">
    <div class="col-12">
        <div class="card" id="main-table-block">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Outputs
                </h4>
                <div class="row row-header">
                    <div class="col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 col-xxxl-1 row-header-column text-left">Index</div>
                    <div class="col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 col-xxxl-6 row-header-column text-left">Redeemed In</div>
                    <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 col-xxxl-3 row-header-column text-left">Address</div>
                    <div class="col-sm-2 col-md-2 col-lg-2 col-xl-2 col-xxl-2 col-xxxl-2 row-header-column text-right">Amount</div>

                </div>
                <div class="row">
                    <div class="col-12">
                        @foreach (var output in Model.Outputs)
                        {

                            <div class="row rows">
                                <div class="col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 col-xxxl-1 row-column text-left">
                                    @output.Index
                                </div>
                                <div class="col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 col-xxxl-6 row-column text-left">
                                    @if (string.IsNullOrEmpty(output.RedeemedTransactionId))
                                    {
                                        <span>Not yet redeemed</span>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Index", "Transaction", new {transactionHash = output.RedeemedTransactionId})">
                                            <span class="text-truncate">@output.RedeemedTransactionId</span>:<span>@output.Index</span>
                                        </a>
                                    }
                                </div>
                                <div class="col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 col-xxxl-3 row-column text-left">
                                    @Url.AddressLink(output.Addresses)
                                </div>
                                <div class="col-sm-2 col-md-2 col-lg-2 col-xl-2 col-xxl-2 col-xxxl-2 row-column text-right">
                                    @output.Amount @ViewBag.Ticker
                                </div>

                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-2 mb-2">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Raw transaction
                </h4>
                <div class="row mt-2 mb-2"><div class="col-12"><pre><code class="json">@Model.Transaction.Json.PrettyPrintJson()</code></pre></div></div>
            </div>
        </div>
    </div>
</div>
<script>hljs.initHighlightingOnLoad();</script>


