
@{
    ViewData["Title"] = $"{ViewBag.Name} Block Explorer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model ITransactionModel
<div class="text-left">
    <h1 class="display-4">Details for Transaction</h1>
    <table class="table text-left">
        <tr>
            <th>Hash</th>
            <td><code>@Model.Hash</code></td>
        </tr>
        <tr>
            <th>Size</th>
            <td>@Math.Round((Model.Size / 1024m), 4) kB</td>
        </tr>
        @if (Model.LockTime > 0)
        {
            <tr>
                <th>Lock Time</th>
                <td>@Model.LockTime</td>
            </tr>
        }
        <tr>
            <th>Block Height</th>
            <td>@Model.Block.Height (@Model.Confirmations Confirmations)</td>
        </tr>
        <tr>
            <th>Block Time</th>
            <td>@DateTimeOffset.FromUnixTimeSeconds(Model.BlockTime)</td>
        </tr>
        <tr>
            <th>Total Outputs</th>
            <td>@Model.Outputs.Sum(p => p.Value) @ViewBag.Ticker</td>
        </tr>
        <tr>
            <th>Total Inputs</th>
            <td>@Model.Inputs.Sum(p => p.Amount) @ViewBag.Ticker</td>
        </tr>
        <tr>
            <th>Fee</th>
            <td>@(Model.Inputs.Sum(p => p.Amount) - Model.Outputs.Sum(p => p.Value)) @ViewBag.Ticker</td>
        </tr>
        <tr>
            <th>Fee per byte</th>
            <td>@(Math.Round((Model.Inputs.Sum(p => p.Amount) - Model.Outputs.Sum(p => p.Value)) / Model.Size * 100000000m, 4)) sat/B</td>
        </tr>
    </table>
    <h1 class="display-4">Inputs</h1>
    <table class="table text-left">
        <tr>
            <th>Index</th>
            <th>Previous output</th>
            <th>Address</th>
            <th>Amount</th>
        </tr>
        @{ var i = 0L;}
        @foreach (var input in Model.Inputs)
        {
            <tr>
                <td>@i</td>
                <td>
                    @if (string.IsNullOrEmpty(input.TxId))
                    {
                        <span>Generation + Fees</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Transaction", new {transactionHash = input.TxId})">
                            <code><span class="text-truncate">@input.TxId</span>:<span>@input.Vout</span></code>
                        </a>
                    }
                </td>
                <td>
                    @string.Join("<br/>", input.From)
                </td>
                <td>
                    @if (string.IsNullOrEmpty(input.TxId))
                    {
                        @Model.Outputs.Sum(p => p.Value) @ViewBag.Ticker
                    }
                    else
                    {
                        @input.Amount
                    }
                </td>
            </tr>
            i++;
        }
        <tr>
            <td colspan="4">
                <h1 class="display-4">Outputs</h1>
            </td>
        </tr>
        <tr>
            <th>Index</th>
            <th>Redeemed in</th>
            <th>Address</th>
            <th>Amount</th>
        </tr>
        @foreach (var output in Model.Outputs)
        {
            <tr>
                <td>@output.Index</td>
                <td>
                    @if (string.IsNullOrEmpty(output.RedeemedTxId))
                    {
                        <span>Not yet redeemed</span>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", "Transaction", new {transactionHash = output.RedeemedTxId})">
                            <code><span class="text-truncate">@output.RedeemedTxId</span>:<span>@output.RedeemedIndex</span></code>
                        </a>
                    }
                </td>
                <td>@string.Join("<br/>", output.ScriptPubKey.Addresses)</td>
                <td>@output.Value @ViewBag.Ticker</td>
            </tr>
        }
    </table>
</div>

