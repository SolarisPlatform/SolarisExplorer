
@{
    ViewData["Title"] = $"{ViewBag.Name} Block Explorer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Globalization
@using Solaris.BlockExplorer.UI.HtmlHelpers
@model BlockTransactionsModel


<div class="row mt-2">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Details for Block #@Model.Block.Height
                </h4>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column text-lightblue">Hash</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">
                        <a href="@Url.Action("Index", new { blockHash = Model.Block.Id })">@Model.Block.Id</a>
                    </div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Date/Time</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@DateTimeOffset.FromUnixTimeSeconds(Model.Block.Time).DateTime.ToString(CultureInfo.CurrentUICulture)</div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Transactions</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Transactions.LongCount() <span class="badge badge-primary">@(Math.Round(Model.Block.Size / 1024m, 4)) kB</span></div>
                </div>
                <div class="row rows">
                    <div class="col-sm-3 col-md-2 col-lg-2 col-xl-3 col-xxl-2 col-xxxl-2 text-left row-column">Value Out</div>
                    <div class="col-sm-9 col-md-10 col-lg-10 col-xl-9 col-xxl-10 col-xxxl-10 text-left row-column">@Model.Block.Transactions.Sum(p => p.TransactionOutputs.Sum(to => to.Output.Value)) @ViewBag.Ticker</div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-2 mb-2 d-none d-lg-block">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Transactions
                </h4>
                <div class="row row-header">
                    <div class="col-lg-1 col-xl-2 col-xxl-4 row-header-column text-left">Transaction Hash</div>
                    <div class="col-lg-3 col-xl-3 col-xxl-2 text-left">From</div>
                    <div class="col-lg-2 col-xl-2 col-xxl-2 row-header-column text-right">Value Out</div>
                    <div class="col-lg-6 col-xl-5 col-xxl-4 row-header-column text-left">To (amount)</div>
                </div>
                <div class="row">
                    <div class="col-12">
                        @foreach (var transaction in Model.Transactions.OrderBy(p => p.BlockOrder))
                        {
                            <div class="row rows">
                                <div class="col-lg-1 col-xl-2 col-xxl-4 row-column text-left">
                                    <a href="@Url.Action("Index", "Transaction", new {transactionHash = transaction.Id})">@transaction.Id</a>
                                </div>
                                <div class="col-lg-3 col-xl-3 col-xxl-2 row-column text-left">
                                    @foreach (var input in transaction.TransactionInputs)
                                    {
                                        @if (input.Input.TransactionOutput.Output == null)
                                        {
                                            <span>Generation + Fees</span>
                                        }
                                        else
                                        {
                                            <span>@Url.AddressLink(input.Input.TransactionOutput.Output.OutputScriptPublicKey.OutputScriptPublicKeyAddresses.Select(p => p.Address).ToArray())</span>
                                        }
                                    }
                                </div>
                                <div class="col-lg-2 col-xl-2 col-xxl-2 row-column text-right">
                                    @transaction.TransactionOutputs.Sum(p => p.Output.Value) @ViewBag.Ticker
                                </div>
                                <div class="col-lg-6 col-xl-5 col-xxl-4 row-column text-right">
                                    @foreach (var output in transaction.TransactionOutputs)
                                    {
                                        <div class="row">
                                            <div class="col-6 text-left">
                                                @Url.AddressLink(output.Output.OutputScriptPublicKey.OutputScriptPublicKeyAddresses.Select(p => p.Address).ToArray())
                                            </div>
                                            <div class="col-6">
                                                @output.Output.Value @ViewBag.Ticker
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row mt-2 mb-2 d-lg-none">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="title-bottom-border mb-2">
                    Transactions
                </h4>
            </div>
        </div>
    </div>
</div>
